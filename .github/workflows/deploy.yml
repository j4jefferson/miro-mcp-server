name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      
      - name: Install dependencies
        run: |
          # Remove package-lock.json and regenerate it
          rm -f package-lock.json
          npm install
      
      - name: Get existing KV namespace IDs
        run: |
          echo "Finding existing KV namespaces..."
          
          # List existing namespaces
          NAMESPACES=$(npx wrangler kv:namespace list)
          echo "Existing namespaces: $NAMESPACES"
          
          # Extract production KV ID (looking for production in the title)
          KV_ID=$(echo "$NAMESPACES" | jq -r '.[] | select(.title | contains("production") and contains("MIRO_TOKENS")) | .id')
          if [ -z "$KV_ID" ] || [ "$KV_ID" = "null" ]; then
            echo "Production KV namespace not found, creating new one..."
            PROD_OUTPUT=$(npx wrangler kv:namespace create "MIRO_TOKENS" --env production 2>&1)
            KV_ID=$(echo "$PROD_OUTPUT" | grep -o '[a-f0-9]\{32\}' | head -1)
          fi
          
          echo "Production KV ID: $KV_ID"
          echo "KV_NAMESPACE_ID=$KV_ID" >> $GITHUB_ENV
          
          # Extract preview KV ID
          KV_PREVIEW_ID=$(echo "$NAMESPACES" | jq -r '.[] | select(.title | contains("preview") and contains("MIRO_TOKENS")) | .id')
          if [ -z "$KV_PREVIEW_ID" ] || [ "$KV_PREVIEW_ID" = "null" ]; then
            echo "Preview KV namespace not found, creating new one..."
            PREVIEW_OUTPUT=$(npx wrangler kv:namespace create "MIRO_TOKENS" --preview 2>&1)
            KV_PREVIEW_ID=$(echo "$PREVIEW_OUTPUT" | grep -o '[a-f0-9]\{32\}' | head -1)
          fi
          
          echo "Preview KV ID: $KV_PREVIEW_ID"
          echo "KV_PREVIEW_NAMESPACE_ID=$KV_PREVIEW_ID" >> $GITHUB_ENV
          
          # Verify we have both IDs
          if [ -z "$KV_ID" ] || [ -z "$KV_PREVIEW_ID" ]; then
            echo "ERROR: Failed to get KV namespace IDs"
            echo "Production ID: $KV_ID"
            echo "Preview ID: $KV_PREVIEW_ID"
            exit 1
          fi
          
          echo "‚úÖ Successfully found/created KV namespaces"
          echo "Production: $KV_ID"
          echo "Preview: $KV_PREVIEW_ID"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Update wrangler.toml with KV namespace IDs
        run: |
          echo "Updating wrangler.toml with KV IDs..."
          echo "Production ID: $KV_NAMESPACE_ID"
          echo "Preview ID: $KV_PREVIEW_NAMESPACE_ID"
          
          # Replace the placeholder IDs with actual IDs
          sed -i "s/PLACEHOLDER_KV_ID/$KV_NAMESPACE_ID/g" wrangler.toml
          sed -i "s/PLACEHOLDER_PREVIEW_ID/$KV_PREVIEW_NAMESPACE_ID/g" wrangler.toml
          
          echo "Updated wrangler.toml content:"
          cat wrangler.toml
          
          # Verify the replacement worked
          if grep -q "PLACEHOLDER" wrangler.toml; then
            echo "ERROR: Placeholder replacement failed"
            exit 1
          fi
      
      - name: Deploy to Cloudflare Workers
        run: npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Set Miro secrets if not exists
        run: |
          # Only set secrets if they don't already exist (avoids overwriting)
          if ! npx wrangler secret list --env production | grep -q "MIRO_CLIENT_ID"; then
            echo "${{ secrets.MIRO_CLIENT_ID }}" | npx wrangler secret put MIRO_CLIENT_ID --env production
          fi
          
          if ! npx wrangler secret list --env production | grep -q "MIRO_CLIENT_SECRET"; then
            echo "${{ secrets.MIRO_CLIENT_SECRET }}" | npx wrangler secret put MIRO_CLIENT_SECRET --env production
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      
      - name: Output deployment info
        run: |
          echo "üöÄ Deployment completed!"
          echo "üìã MCP Server URL: https://miro-mcp-server.YOUR_SUBDOMAIN.workers.dev/mcp"
          echo "üîê Authorization URL: https://miro-mcp-server.YOUR_SUBDOMAIN.workers.dev/auth"
          echo "üíö Health Check: https://miro-mcp-server.YOUR_SUBDOMAIN.workers.dev/health"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual deployment reason: ${{ github.event.inputs.reason }}"
          fi
