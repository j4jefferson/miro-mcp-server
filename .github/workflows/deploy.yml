name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create KV namespaces if needed
        run: |
          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          # Check if production KV namespace exists and get ID
          KV_ID=$(npx wrangler kv:namespace list 2>/dev/null | jq -r '.[] | select(.title=="miro-mcp-server-MIRO_TOKENS") | .id' || echo "")
          if [ -z "$KV_ID" ]; then
            echo "Creating production KV namespace..."
            KV_ID=$(npx wrangler kv:namespace create "MIRO_TOKENS" --env production | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
          fi
          echo "KV_NAMESPACE_ID=$KV_ID" >> $GITHUB_ENV
          
          # Check if preview KV namespace exists and get ID
          KV_PREVIEW_ID=$(npx wrangler kv:namespace list 2>/dev/null | jq -r '.[] | select(.title=="miro-mcp-server-MIRO_TOKENS_preview") | .id' || echo "")
          if [ -z "$KV_PREVIEW_ID" ]; then
            echo "Creating preview KV namespace..."
            KV_PREVIEW_ID=$(npx wrangler kv:namespace create "MIRO_TOKENS" --preview | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
          fi
          echo "KV_PREVIEW_NAMESPACE_ID=$KV_PREVIEW_ID" >> $GITHUB_ENV
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Update wrangler.toml with KV namespace IDs
        run: |
          sed -i "s/id = \"\"/id = \"$KV_NAMESPACE_ID\"/g" wrangler.toml
          sed -i "s/preview_id = \"\"/preview_id = \"$KV_PREVIEW_NAMESPACE_ID\"/g" wrangler.toml
          echo "Updated wrangler.toml:"
          cat wrangler.toml
      
      - name: Deploy to Cloudflare Workers
        run: npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Set Miro secrets if not exists
        run: |
          # Only set secrets if they don't already exist (avoids overwriting)
          if ! npx wrangler secret list --env production | grep -q "MIRO_CLIENT_ID"; then
            echo "${{ secrets.MIRO_CLIENT_ID }}" | npx wrangler secret put MIRO_CLIENT_ID --env production
          fi
          
          if ! npx wrangler secret list --env production | grep -q "MIRO_CLIENT_SECRET"; then
            echo "${{ secrets.MIRO_CLIENT_SECRET }}" | npx wrangler secret put MIRO_CLIENT_SECRET --env production
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      
      - name: Output deployment info
        run: |
          echo "üöÄ Deployment completed!"
          echo "üìã MCP Server URL: https://miro-mcp-server.YOUR_SUBDOMAIN.workers.dev/mcp"
          echo "üîê Authorization URL: https://miro-mcp-server.YOUR_SUBDOMAIN.workers.dev/auth"
          echo "üíö Health Check: https://miro-mcp-server.YOUR_SUBDOMAIN.workers.dev/health"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual deployment reason: ${{ github.event.inputs.reason }}"
          fi
